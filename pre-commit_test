#!/bin/bash


# jest를 이용한 단위 테스크
chkFileJest() {
    echo "jest'-------------------------"
    cd "${0%/*}/../../sample-nodejs" && npm run jest
    JEST_RESULT=$?
    if [[ $status -ne 0 ]]; then
        echo "Jest tests failed. Aborting commit."
        exit 1
    fi

}

chkStatus() {
    if [[ "$1" == 0 ]]; then
        echo "Commit Success"
        chkFileJest
        #exit 0
    else
        echo "Commit False"
        exit 1
    fi
}

# eslint을 이용하여 변경된 파일 검사.
#chkFileDiff() {
#    git diff --cached --name-only | while read FILE; do
#        if [[ "$FILE" =~ ^sample-nodejs/.+(js)$ ]]; then
#            echo "Running tests...$FILE"
#            cd ${0%/*}/../../sample-nodejs && npm run lint
#           status=$?
#        fi
#    done # || chkStatus $status
#    return $?
#}

chkFileLint() {
    echo "#### chkFileLint ####"
    git diff --cached --name-only | while read FILE; do
        if [[ "$FILE" =~ ^sample-nodejs/.+(js)$ ]]; then
            echo "Running tests...$FILE"
            echo "-----------------"
            $PWD/sample-nodejs/node_modules/.bin/eslint $FILE
            status=$?
            if [[ $status -ne 0 ]]; then
                echo  " ESLint 체크 파일 ' $FILE '에서 실패했습니다. 코드를 확인하고 다시 시도하십시오. npm run lint를 통해 ESLint를 수동으로 실행할 수 있습니다. "
                status=1
                exit 1
            fi
        fi
    done || status=$?

    if [ "$status" == 0 ]; then
        chkFileJest
    else
        exit 1
    fi

}


test(){
   against=$(git hash-object -t tree /dev/null)
# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

}

changed_files=$(git diff --cached --name-only )
if [ -z "$changed_files" ]; then
    echo "변경된 파일이 없습니다."
    exit 1
fi

echo "변경된 파일 ::  $changed_files"

while :; do
    read -p "커밋을 하시겠습니까? [y/n] " RESPONSE </dev/tty
    case "${RESPONSE}" in
    [Yy]*)
        # test
        # chkFileJest
        # chkFileLint
        exit 0
        break
        ;;
    [Nn]*) exit 1 ;;
    esac
done

#exit 1

